package com.example.designmode.factorymode;

/**
 * @Author: THM
 * @DateTime: 2021/9/14 17:27
 * @Description: 工厂模式：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。
 * 工厂方法模式让一个类的实例化延迟到其子类。
 * 工厂方法模式又简称为工厂模式(Factory Pattern)，又可称作虚拟构造器模式(Virtual Constructor Pattern)
 * 或多态工厂模式(Polymorphic Factory Pattern)。工厂方法模式是一种类创建型模式。
 * <p>
 * 优点1：用户只需要关心所需产品对应的工厂，无须关心创建细节
 * 优点2：能够让工厂可以自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部
 * 优点3：拓展性好，在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口
 * <p>
 * 缺点1：在添加新产品时，需要编写新的具体产品类，而且还要提供与之对应的具体工厂类，系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，
 * 有更多的类需要编译和运行，会给系统带来一些额外的开销
 * 缺点2：由于考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度
 * <p>
 * 使用场景
 * 1.客户端不知道它所需要的对象的类。在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，
 * 具体的产品对象由具体工厂类创建，可将具体工厂类的类名存储在配置文件或数据库中
 * 2.抽象工厂类通过其子类来指定创建哪个对象。在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，
 * 利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展
 */
public class Client {

    public static void main(String[] args) {
        Factory factory = new ProductAFactory();
        Product product = factory.createProduct();
        product.writeProduct();
    }
}
